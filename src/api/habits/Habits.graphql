scalar Date

# data coming out
type Habit {
  _id: ID!
  name: String!
  events: [Event]
}

type Event {
  _id: ID!
  date: Date
}

# data coming in
input HabitInput {
  _id: ID
  name: String!
}

# define mutations allowed
type Mutation {
  # data coming into mutation needs to fit HabitInput shape
  addHabit(habit: HabitInput): Habit
  addEvent(habitId: ID, date: Date): Habit
  removeEvent(habitId: ID, eventId: ID): Habit
}

type Query {
  habits: [Habit]
}
